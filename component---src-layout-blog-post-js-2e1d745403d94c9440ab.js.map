{"version":3,"sources":["webpack:///./src/components/GatsbyImageCompare.js","webpack:///./src/layout/BlogPost.js","webpack:///./src/components/PhotoGrid.js"],"names":["propTypes","leftImage","prop_types_default","a","string","isRequired","rightImage","sliderLineWidth","number","handleSize","hover","bool","skeleton","element","autoReloadSpan","autoReloadLimit","sliderPositionPercentage","GatsbyImageCompare_ReactCompareImage","ReactCompareImage","props","_this","_React$Component","call","this","componentDidMount","containerElement","containerRef","current","css_element_queries","setImagesSize","addEventListener","startSliding","window","finishSliding","setState","isImgFullyLoaded","componentDidUpdate","prevProps","prevState","state","underImageRef","src","overImageRef","isLoadingRightImg","isLoadingLeftImg","componentWillUnmount","removeEventListener","autoReloadTasks","forEach","task","clearTimeout","imageWidth","getBoundingClientRect","width","e","preventDefault","handleSliding","event","pos","touches","pageX","pageXOffset","left","minPos","maxPos","onRightImageLoaded","onLeftImageLoaded","onError","ref","_this$props","retryCount","taskId","setTimeout","push","render","styles","container","boxSizing","position","overflow","marginTop","marginBottom","underImage","display","height","background","overImage","clip","objectFit","top","slider","alignItems","cursor","flexDirection","justifyContent","line","boxShadow","flex","handle","border","backgroundColor","leftArrow","borderRight","marginLeft","marginRight","rightArrow","borderLeft","overlayTextLeft","opacity","overlayTextRight","right","leftWord","textAlign","color","fontWeight","textTransform","padding","rightWord","react_default","createElement","Fragment","style","Object","assign","dataenzyme","onLoad","alt","className","createRef","Component","GatsbyImageCompare","_ref","photos","children","filter","child","href","defaultProps","node","components_GatsbyImageCompare","__webpack_require__","d","__webpack_exports__","Template","pageQuery","renderAst","rehype_react_default","components","photo-grid","PhotoGrid","image-compare","Compiler","post","data","markdownRemark","MainLayout","MetaTags","title","frontmatter","description","subtitle","image","childImageSharp","sizes","pathname","path","article","id","Date","date","getFullYear","itemScope","itemType","htmlAst","photoGridProptypes","gatsbyImages","prop_types__WEBPACK_IMPORTED_MODULE_4___default","array","photoIndex","isOpen","generatePicture","picture","index","margin","_this2","react__WEBPACK_IMPORTED_MODULE_1___default","key","backgroundImage","onClick","generateGrid","pictures","numberPerRow","photoGrid","i","length","photoRow","columnIndex","_this3","_this$state","images","react_image_lightbox__WEBPACK_IMPORTED_MODULE_2__","mainSrc","nextSrc","prevSrc","onCloseRequest","onMovePrevRequest","onMoveNextRequest","PhotoGridGatsbyMethod","srcs","map","photo"],"mappings":"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","file":"component---src-layout-blog-post-js-2e1d745403d94c9440ab.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\n\n// Gatsby binding for image compare in markdowns\nimport { ResizeSensor } from 'css-element-queries'\n\nconst propTypes = {\n  leftImage: PropTypes.string.isRequired,\n  rightImage: PropTypes.string.isRequired,\n  sliderLineWidth: PropTypes.number,\n  handleSize: PropTypes.number,\n  hover: PropTypes.bool,\n  skeleton: PropTypes.element,\n  autoReloadSpan: PropTypes.number,\n  autoReloadLimit: PropTypes.number,\n  sliderPositionPercentage: PropTypes.number,\n}\n\nconst defaultProps = {\n  sliderLineWidth: 2,\n  handleSize: 40,\n  hover: false,\n  skeleton: null,\n  autoReloadSpan: null,\n  autoReloadLimit: 10,\n  sliderPositionPercentage: 0.75,\n}\n\nclass ReactCompareImage extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      sliderPositionPercentage: this.props.sliderPositionPercentage, // 0 to 1\n      imageWidth: 0,\n      isImgFullyLoaded: false,\n    }\n\n    this.containerRef = React.createRef()\n    this.underImageRef = React.createRef()\n    this.overImageRef = React.createRef()\n\n    this.isLoadingRightImg = true\n    this.isLoadingLeftImg = true\n\n    this.autoReloadTasks = []\n\n    this.retryCount = 0\n  }\n\n  componentDidMount = () => {\n    const containerElement = this.containerRef.current\n\n    // Re-set static size when container size is changed\n    new ResizeSensor(containerElement, () => {\n      this.setImagesSize()\n    })\n\n    // for mobile\n    containerElement.addEventListener('touchstart', this.startSliding)\n    window.addEventListener('touchend', this.finishSliding)\n\n    // for desktop\n    if (this.props.hover) {\n      containerElement.addEventListener('mouseenter', this.startSliding)\n      containerElement.addEventListener('mouseleave', this.finishSliding)\n    } else {\n      containerElement.addEventListener('mousedown', this.startSliding)\n      window.addEventListener('mouseup', this.finishSliding)\n    }\n\n    // Hotfix: img onload is never called, thanks to service worker\n    this.setState({\n      isImgFullyLoaded: true\n    });\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    // do initial setup if loading static and DOM constructing are fully done\n    if (\n      prevState.isImgFullyLoaded === false &&\n      this.state.isImgFullyLoaded === true\n    ) {\n      this.setImagesSize()\n    }\n\n    // show skeleton again if given static are changed\n    if (\n      this.props.leftImage !== prevProps.leftImage ||\n      this.props.rightImage !== prevProps.rightImage\n    ) {\n      this.underImageRef.current.src = null\n      this.overImageRef.current.src = null\n\n      this.isLoadingRightImg = true\n      this.isLoadingLeftImg = true\n      this.setState({\n        isImgFullyLoaded: false,\n      })\n\n      this.underImageRef.current.src = this.props.rightImage\n      this.overImageRef.current.src = this.props.leftImage\n    }\n  }\n\n  componentWillUnmount = () => {\n    this.finishSliding()\n    window.removeEventListener('mouseup', this.finishSliding)\n    window.removeEventListener('touchend', this.finishSliding)\n    this.autoReloadTasks.forEach(task => clearTimeout(task))\n  }\n\n  setImagesSize = () => {\n    // Image size set as follows.\n    //\n    // 1. set under image size like so:\n    //     width  = 100% of container width\n    //     height = auto\n    //\n    // 2. set over imaze size like so:\n    //     width  = 100% of container width\n    //     height = under image's height\n    //              (protrudes is hidden by css 'object-fit: hidden')\n    this.setState({\n      imageWidth: this.underImageRef.current.getBoundingClientRect().width,\n    })\n  }\n\n  startSliding = e => {\n    // Prevent default behavior other than mobile scrolling\n    if (!('touches' in e)) {\n      e.preventDefault()\n    }\n\n    // Slide the image even if you just click or tap (not drag)\n    this.handleSliding(e)\n\n    window.addEventListener('mousemove', this.handleSliding)\n    window.addEventListener('touchmove', this.handleSliding)\n  }\n\n  finishSliding = () => {\n    window.removeEventListener('mousemove', this.handleSliding)\n    window.removeEventListener('touchmove', this.handleSliding)\n  }\n\n  handleSliding = event => {\n    const e = event || window.event\n\n    // Calc Cursor Position from the left edge of the viewport\n    const cursorXfromViewport = e.touches ? e.touches[0].pageX : e.pageX\n\n    // Calc Cursor Position from the left edge of the window (consider any page scrolling)\n    const cursorXfromWindow = cursorXfromViewport - window.pageXOffset\n\n    // Calc Cursor Position from the left edge of the image\n    const imagePosition = this.underImageRef.current.getBoundingClientRect()\n    let pos = cursorXfromWindow - imagePosition.left\n\n    // Set minimum and maximum values ​​to prevent the slider from overflowing\n    const minPos = 0 + this.props.sliderLineWidth / 2\n    const maxPos = this.state.imageWidth - this.props.sliderLineWidth / 2\n\n    if (pos < minPos) pos = minPos\n    if (pos > maxPos) pos = maxPos\n\n    this.setState({\n      sliderPositionPercentage: pos / this.state.imageWidth,\n    })\n  }\n\n  onRightImageLoaded = () => {\n    this.isLoadingRightImg = false\n\n    if (!this.isLoadingRightImg && !this.isLoadingLeftImg) {\n      this.setState({ isImgFullyLoaded: true })\n    }\n  }\n\n  onLeftImageLoaded = () => {\n    this.isLoadingLeftImg = false\n    if (!this.isLoadingRightImg && !this.isLoadingLeftImg) {\n      this.setState({ isImgFullyLoaded: true })\n    }\n  }\n\n  onError = (ref, src) => {\n    const { autoReloadSpan, autoReloadLimit } = this.props\n\n    if (!autoReloadSpan) return\n    if (this.retryCount >= autoReloadLimit) return\n\n    const taskId = setTimeout(() => {\n      ref.current.src = null\n      ref.current.src = src\n    }, autoReloadSpan)\n    this.autoReloadTasks.push(taskId)\n\n    this.retryCount += 1\n  }\n\n  render = () => {\n    const styles = {\n      container: {\n        boxSizing: 'border-box',\n        position: 'relative',\n        width: '100%',\n        overflow: 'hidden',\n        marginTop:'1em',\n        marginBottom:'1em'\n      },\n      underImage: {\n        display: 'block',\n        height: 'auto', // Respect the aspect ratio\n        width: '100%',\n        background: `url(${this.props.underImage})`,\n      },\n      overImage: {\n        clip: `rect(auto, ${this.state.imageWidth *\n        this.state.sliderPositionPercentage}px, auto, auto)`,\n        display: 'block',\n        height: '100%', // fit to the height of under image\n        objectFit: 'cover', // protrudes is hidden\n        position: 'absolute',\n        top: 0,\n        width: '100%',\n      },\n      slider: {\n        alignItems: 'center',\n        cursor: !this.props.hover && 'ew-resize',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        justifyContent: 'center',\n        left:\n          this.state.imageWidth * this.state.sliderPositionPercentage -\n          this.props.handleSize / 2 +\n          'px',\n        position: 'absolute',\n        top: 0,\n        width: `${this.props.handleSize}px`,\n      },\n      line: {\n        background: 'white',\n        boxShadow:\n          '0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)',\n        flex: '0 1 auto',\n        height: '100%',\n        width: `${this.props.sliderLineWidth}px`,\n      },\n      handle: {\n        alignItems: 'center',\n        border: `${this.props.sliderLineWidth}px solid white`,\n        boxShadow:\n          '0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)',\n        boxSizing: 'border-box',\n        display: 'flex',\n        flex: '1 0 auto',\n        height: `80px`,\n        justifyContent: 'center',\n        width: `10px`,\n        backgroundColor: `white`,\n      },\n      leftArrow: {\n        border: `inset ${this.props.handleSize * 0.15}px rgba(0,0,0,0)`,\n        borderRight: `${this.props.handleSize * 0.15}px solid white`,\n        height: '0px',\n        marginLeft: `-${this.props.handleSize * 0.50}px`, // for IE11\n        marginRight: `${this.props.handleSize * 0.50}px`,\n        width: '0px',\n      },\n      rightArrow: {\n        border: `inset ${this.props.handleSize * 0.15}px rgba(0,0,0,0)`,\n        borderLeft: `${this.props.handleSize * 0.15}px solid white`,\n        height: '0px',\n        marginRight: `-${this.props.handleSize * 0.50}px`, // for IE11\n        width: '0px',\n      },\n      overlayTextLeft: {\n        alignItems: 'flex-start',\n        display: 'flex',\n        flexDirection: 'column',\n        //height: '50px',\n        justifyContent: 'center',\n        left: `${this.state.imageWidth}-100px`,\n        position: 'absolute',\n        top: 0,\n        // width: `100px`,\n        backgroundColor:'rgba(0,0,0,0.5)',\n        opacity: this.state.sliderPositionPercentage\n      },\n      overlayTextRight: {\n        alignItems: 'flex-end',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        right: `0`,\n        position: 'absolute',\n        top: 0,\n        backgroundColor: 'rgba(0,0,0,0.5)',\n        opacity: 1-this.state.sliderPositionPercentage\n      },\n      leftWord: {\n        textAlign: 'left',\n        color: 'white',\n        fontWeight: 400,\n        textTransform: 'uppercase',\n        padding: '1em',\n      },\n      rightWord: {\n        textAlign: 'right',\n        color: 'white',\n        fontWeight: 400,\n        textTransform: 'uppercase',\n        padding: '1em',\n      }\n    }\n\n    return (\n      <React.Fragment>\n        {this.props.skeleton &&\n        !this.state.isImgFullyLoaded && (\n          <div style={{ ...styles.container }}>{this.props.skeleton}</div>\n        )}\n\n        <div\n          style={{\n            ...styles.container,\n            display: this.state.isImgFullyLoaded ? 'block' : 'none',\n          }}\n          ref={this.containerRef}\n          dataenzyme=\"container\"\n        >\n\n\n          <img\n            onLoad={this.onLeftImageLoaded}\n            onError={() =>\n              this.onError(this.underImageRef, this.props.rightImage)\n            }\n            alt=\"left\"\n            className=\"img-comp-under\"\n            ref={this.underImageRef}\n            src={this.props.rightImage}\n            style={styles.underImage}\n          />\n\n\n          <img\n            onLoad={this.onRightImageLoaded}\n            onError={() =>\n              this.onError(this.overImageRef, this.props.leftImage)\n            }\n            alt=\"right\"\n            className=\"img-comp-over\"\n            ref={this.overImageRef}\n            src={this.props.leftImage}\n            style={styles.overImage}\n          />\n\n          <div style={styles.overlayTextRight}>\n              <span style={styles.leftWord}>\n                RAW\n              </span>\n          </div>\n          <div style={styles.overlayTextLeft}>\n              <span style={styles.leftWord}>\n                GRADED\n              </span>\n          </div>\n          <div className=\"img-comp-slider\" style={styles.slider}>\n\n            <div style={styles.line}/>\n            <div style={styles.handle}>\n              <div style={styles.leftArrow}/>\n              <div style={styles.rightArrow}/>\n            </div>\n            <div style={styles.line}/>\n\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nReactCompareImage.propTypes = propTypes\nReactCompareImage.defaultProps = defaultProps\n\n\nfunction GatsbyImageCompare({ children }) {\n  const photos = children.filter(child => typeof child !== 'string');\n  const leftImage = photos[0].props.href;\n  const rightImage = photos[1].props.href;\n  return (\n    <ReactCompareImage leftImage={leftImage ? leftImage : null} rightImage={rightImage ? rightImage : null} />\n  );\n}\n\nGatsbyImageCompare.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default GatsbyImageCompare;","import React from 'react'\nimport MainLayout from './MainLayout'\nimport './BasicPage.scss'\nimport 'moment'\nimport rehypeReact from \"rehype-react\"\nimport PhotoGrid from '../components/PhotoGrid';\nimport ImageCompare from '../components/GatsbyImageCompare';\nimport MetaTags from '../components/MetaTags';\nimport { graphql } from 'gatsby'\n\nconst renderAst = new rehypeReact({\n  createElement: React.createElement,\n  components: { \"photo-grid\": PhotoGrid, \"image-compare\": ImageCompare },\n}).Compiler\n\n\n/* style={{ backgroundImage: 'url(' + post.frontmatter.cover.childImageSharp.fixed.src + ')' }}*/\nexport default function Template({ data }) {\n  const { markdownRemark: post } = data // data.markdownRemark holds our post data\n  return (\n    <MainLayout>\n      <MetaTags\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.frontmatter.subtitle}\n        image={post.frontmatter.image.childImageSharp.sizes.src}\n        pathname={post.frontmatter.path}\n        article\n      />\n      <div className=\"coverBand\"\n           id=\"content\">\n        <div className=\"overlay\">\n          <div className=\"punchline\">{post.frontmatter.title}</div>\n          <div className=\"subtext\">\n            <p><strong>{post.frontmatter.subtitle} </strong></p>\n            <p><em>{new Date(post.frontmatter.date).getFullYear()}</em></p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"Page\">\n        <article className=\"card\" itemScope itemType=\"http://schema.org/BlogPosting\">\n          <div className=\"article\">\n            <br/><br/>\n            {renderAst(post.htmlAst)}\n          </div>\n        </article>\n      </div>\n    </MainLayout>\n  )\n}\n\n//  <div className=\"content\" itemProp=\"articleBody\" dangerouslySetInnerHTML={{ __html: post.html }}/>\n\n\nexport const pageQuery = graphql`\n    query BlogPostByPath($path: String!) {\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n            htmlAst # previously \\`html\\`\n            frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                path\n                title\n                subtitle\n                image {\n                    childImageSharp {\n                        # Other options include height (set both width and height to crop),\n                        # grayscale, duotone, rotate, etc.\n                        fixed(width: 700) {\n                            # Choose either the fragment including a small base64ed image, a traced placeholder SVG, or one without.\n                            ...GatsbyImageSharpFixed\n                            src\n                        }\n                        sizes {\n                            src\n                        }\n\n                    }\n                }\n                \n            }\n        }\n    }`\n\n\n\n","import React from 'react';\nimport Lightbox from 'react-image-lightbox'\nimport 'react-image-lightbox/style.css' // This only needs to be imported once in your app\nimport PropTypes from 'prop-types'\nimport './PhotoGrid.scss';\n\n// DIRTY test for custom component.\n/*\n\nThe problem here :\n\nWe want to fetch the static from the markdown folder but graphql queries runned here cannot take any variable and doesnt have access to gatsby context\nThe only way I found to keep a clean syntax is to insert img tags directly in the markdown, they will be transformed by gatsby image (so responsive stuff and all)\nand then those urls can be used (props.href)\n */\n\nfunction styleBackgroundPhoto(src) {\n  return {\n    backgroundImage: 'url(' + src + ')',\n  }\n}\n\nconst photoGridProptypes = { gatsbyImages: PropTypes.array.isRequired }\nclass PhotoGrid extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      photoIndex: 0,\n      isOpen: false,\n    }\n  }\n\n  generatePicture(picture, index, margin) {\n    let className = margin ? `photoThumbnail marginRight` : `photoThumbnail`\n    return (\n      <div key={index} className={className} style={styleBackgroundPhoto(picture)}\n           onClick={() => this.setState({ isOpen: true, photoIndex: index })}/>\n    )\n  }\n\n  //numberPerRow is a WIP, needs changes in sass too\n  generateGrid(pictures, numberPerRow = 3) {\n\n    let photoGrid = []\n    for (let i = 0; i < pictures.length; i += numberPerRow) {\n\n      let photoRow = []\n\n      for (let columnIndex = 0; columnIndex < numberPerRow && i + columnIndex < pictures.length; columnIndex++) {\n        // handle margin right\n        if (columnIndex < numberPerRow) {\n          photoRow.push(this.generatePicture(pictures[i + columnIndex], i + columnIndex, true))\n        } else {\n          photoRow.push(this.generatePicture(pictures[i + columnIndex], i + columnIndex, false))\n        }\n      }\n      photoGrid.push(\n        <div key={i} className=\"photoRowContainer\">\n          {photoRow}\n        </div>,\n      )\n      photoRow = []\n    }\n    return photoGrid\n  }\n\n\n  render() {\n\n    const { isOpen, photoIndex } = this.state\n    const images = this.props.gatsbyImages;\n\n    return (\n      <div className=\"componentPhotoGrid\">\n        {isOpen && (\n\n          <Lightbox\n            mainSrc={images[photoIndex]}\n            nextSrc={images[(photoIndex + 1) % images.length]}\n            prevSrc={images[(photoIndex + images.length - 1) % images.length]}\n            onCloseRequest={() => this.setState({ isOpen: false })}\n            onMovePrevRequest={() =>\n              this.setState({\n                photoIndex: (photoIndex + images.length - 1) % images.length,\n              })\n            }\n            onMoveNextRequest={() =>\n              this.setState({\n                photoIndex: (photoIndex + 1) % images.length,\n              })\n            }\n          />\n        )}\n\n        <div className=\"photoGrid\">\n          {this.generateGrid(this.props.gatsbyImages)}\n        </div>\n      </div>\n\n    )\n  }\n\n}\n\nPhotoGrid.propTypes = photoGridProptypes;\n\n\nfunction PhotoGridGatsbyMethod({ children }) {\n  const photos = children.filter(child => typeof child !== 'string');\n  const srcs = photos.map(photo => photo.props.href);\n  return (\n    <PhotoGrid gatsbyImages={srcs} />\n  );\n}\n\nPhotoGridGatsbyMethod.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default PhotoGridGatsbyMethod;"],"sourceRoot":""}