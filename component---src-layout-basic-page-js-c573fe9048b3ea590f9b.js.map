{"version":3,"sources":["webpack:///./src/layout/BasicPage.js","webpack:///./src/components/PhotoGrid.js"],"names":["__webpack_require__","r","__webpack_exports__","d","Template","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_MainLayout__WEBPACK_IMPORTED_MODULE_1__","rehype_react__WEBPACK_IMPORTED_MODULE_3__","rehype_react__WEBPACK_IMPORTED_MODULE_3___default","_components_PhotoGrid__WEBPACK_IMPORTED_MODULE_4__","_components_MetaTags__WEBPACK_IMPORTED_MODULE_5__","renderAst","a","createElement","components","photo-grid","Compiler","_ref","data","post","location","markdownRemark","language","frontmatter","pathname","this","props","title","description","subtitle","path","article","className","id","style","paddingTop","paddingBottom","itemProp","htmlAst","photoGridProptypes","gatsbyImages","prop_types__WEBPACK_IMPORTED_MODULE_4___default","array","isRequired","PhotoGrid","_this","_React$Component","call","state","photoIndex","isOpen","generatePicture","picture","index","margin","src","_this2","react__WEBPACK_IMPORTED_MODULE_1___default","key","backgroundImage","onClick","setState","generateGrid","pictures","numberPerRow","photoGrid","i","length","photoRow","columnIndex","push","render","_this3","_this$state","images","react_image_lightbox__WEBPACK_IMPORTED_MODULE_2__","mainSrc","nextSrc","prevSrc","onCloseRequest","onMovePrevRequest","onMoveNextRequest","Component","PhotoGridGatsbyMethod","srcs","children","filter","child","map","photo","href","propTypes","node"],"mappings":"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","file":"component---src-layout-basic-page-js-c573fe9048b3ea590f9b.js","sourcesContent":["import React from 'react'\nimport MainLayout from './MainLayout'\nimport './BasicPage.scss'\nimport rehypeReact from 'rehype-react'\nimport PhotoGrid from '../components/PhotoGrid'\nimport MetaTags from '../components/MetaTags'\n\n\nconst renderAst = new rehypeReact({\n  createElement: React.createElement,\n  components: { \"photo-grid\": PhotoGrid },\n}).Compiler\n\nexport default function Template({ data, location }) {\n  const { markdownRemark: post } = data\n  return (\n    <MainLayout language={post.frontmatter.language} location={{ pathname: this.props.location.pathname }}>\n      <MetaTags title={post.frontmatter.title}\n                description={post.frontmatter.description || post.frontmatter.subtitle || ''}\n                pathname={post.frontmatter.path}\n                article/>\n      <div className=\"coverBand\" id=\"content\">\n        <div className=\"overlay overlaySmaller\">\n          <h1 className=\"punchline\">{post.frontmatter.title}</h1>\n        </div>\n      </div>\n\n      <div className=\"Page\">\n        <article className=\"card article\" id=\"content\">\n          <header className=\"header\" style={{ paddingTop: '1em', paddingBottom: '2em' }}>\n          </header>\n          <div className=\"content\" itemProp=\"articleBody\">\n            {renderAst(post.htmlAst)}\n          </div>\n        </article>\n      </div>\n\n\n    </MainLayout>\n\n\n  )\n}\n\nexport const pageQuery = graphql`\n    query PageByPath($path: String!) {\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n              htmlAst # previously \\`html\\`\n            frontmatter {\n                path\n                title\n                language\n            }\n        }\n    }`\n","import React from 'react';\nimport Lightbox from 'react-image-lightbox'\nimport 'react-image-lightbox/style.css' // This only needs to be imported once in your app\nimport PropTypes from 'prop-types'\nimport './PhotoGrid.scss';\n\n// DIRTY test for custom component.\n/*\n\nThe problem here :\n\nWe want to fetch the res from the markdown folder but graphql queries runned here cannot take any variable and doesnt have access to gatsby context\nThe only way I found to keep a clean syntax is to insert img tags directly in the markdown, they will be transformed by gatsby image (so responsive stuff and all)\nand then those urls can be used (props.href)\n */\n\nfunction styleBackgroundPhoto(src) {\n  return {\n    backgroundImage: 'url(' + src + ')',\n  }\n}\n\nconst photoGridProptypes = { gatsbyImages: PropTypes.array.isRequired }\nclass PhotoGrid extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      photoIndex: 0,\n      isOpen: false,\n    }\n  }\n\n  generatePicture(picture, index, margin) {\n    let className = margin ? `photoThumbnail marginRight` : `photoThumbnail`\n    return (\n      <div key={index} className={className} style={styleBackgroundPhoto(picture)}\n           onClick={() => this.setState({ isOpen: true, photoIndex: index })}/>\n    )\n  }\n\n  //numberPerRow is a WIP, needs changes in sass too\n  generateGrid(pictures, numberPerRow = 3) {\n\n    let photoGrid = []\n    for (let i = 0; i < pictures.length; i += numberPerRow) {\n\n      let photoRow = []\n\n      for (let columnIndex = 0; columnIndex < numberPerRow && i + columnIndex < pictures.length; columnIndex++) {\n        // handle margin right\n        if (columnIndex < numberPerRow) {\n          photoRow.push(this.generatePicture(pictures[i + columnIndex], i + columnIndex, true))\n        } else {\n          photoRow.push(this.generatePicture(pictures[i + columnIndex], i + columnIndex, false))\n        }\n      }\n      photoGrid.push(\n        <div key={i} className=\"photoRowContainer\">\n          {photoRow}\n        </div>,\n      )\n      photoRow = []\n    }\n    return photoGrid\n  }\n\n\n  render() {\n\n    const { isOpen, photoIndex } = this.state\n    const images = this.props.gatsbyImages;\n\n    return (\n      <div className=\"componentPhotoGrid\">\n        {isOpen && (\n\n          <Lightbox\n            mainSrc={images[photoIndex]}\n            nextSrc={images[(photoIndex + 1) % images.length]}\n            prevSrc={images[(photoIndex + images.length - 1) % images.length]}\n            onCloseRequest={() => this.setState({ isOpen: false })}\n            onMovePrevRequest={() =>\n              this.setState({\n                photoIndex: (photoIndex + images.length - 1) % images.length,\n              })\n            }\n            onMoveNextRequest={() =>\n              this.setState({\n                photoIndex: (photoIndex + 1) % images.length,\n              })\n            }\n          />\n        )}\n\n        <div className=\"photoGrid\">\n          {this.generateGrid(this.props.gatsbyImages)}\n        </div>\n      </div>\n\n    )\n  }\n\n}\n\nPhotoGrid.propTypes = photoGridProptypes;\n\n\nfunction PhotoGridGatsbyMethod({ children }) {\n  const photos = children.filter(child => typeof child !== 'string');\n  const srcs = photos.map(photo => photo.props.href);\n  return (\n    <PhotoGrid gatsbyImages={srcs} />\n  );\n}\n\nPhotoGridGatsbyMethod.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default PhotoGridGatsbyMethod;"],"sourceRoot":""}