{"version":3,"sources":["webpack:///./src/layout/BasicPage.js","webpack:///./src/components/PhotoGrid.js"],"names":["renderAst","rehype_react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","react__WEBPACK_IMPORTED_MODULE_1___default","components","photo-grid","_components_PhotoGrid__WEBPACK_IMPORTED_MODULE_5__","Compiler","Template","_ref","data","location","post","markdownRemark","_MainLayout__WEBPACK_IMPORTED_MODULE_2__","language","frontmatter","Object","assign","_components_MetaTags__WEBPACK_IMPORTED_MODULE_6__","title","description","subtitle","pathname","path","article","className","id","style","paddingTop","paddingBottom","itemProp","htmlAst","pageQuery","photoGridProptypes","gatsbyImages","prop_types__WEBPACK_IMPORTED_MODULE_4___default","array","isRequired","PhotoGrid","props","_this","_React$Component","call","this","state","photoIndex","isOpen","generatePicture","picture","index","margin","src","_this2","key","backgroundImage","onClick","setState","generateGrid","pictures","numberPerRow","photoGrid","i","length","photoRow","columnIndex","push","render","_this3","_this$state","images","react_image_lightbox__WEBPACK_IMPORTED_MODULE_2__","mainSrc","nextSrc","prevSrc","onCloseRequest","onMovePrevRequest","onMoveNextRequest","Component","PhotoGridGatsbyMethod","srcs","children","filter","child","map","photo","href","propTypes","node","__webpack_exports__"],"mappings":"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","file":"component---src-layout-basic-page-js-8e1928a794ccdf331d87.js","sourcesContent":["import React from 'react'\nimport MainLayout from './MainLayout'\nimport './BasicPage.scss'\nimport rehypeReact from 'rehype-react'\nimport PhotoGrid from '../components/PhotoGrid'\nimport MetaTags from '../components/MetaTags'\n\n\nconst renderAst = new rehypeReact({\n  createElement: React.createElement,\n  components: { \"photo-grid\": PhotoGrid },\n}).Compiler\n\nexport default function Template({ data, location }) {\n  const { markdownRemark: post } = data\n  return (\n    <MainLayout language={post.frontmatter.language} location={{ ...location }}>\n      <MetaTags title={post.frontmatter.title}\n                description={post.frontmatter.description || post.frontmatter.subtitle || ''}\n                pathname={post.frontmatter.path}\n                article/>\n      <div className=\"coverBand\" id=\"content\">\n        <div className=\"overlay overlaySmaller\">\n          <h1 className=\"punchline\">{post.frontmatter.title}</h1>\n        </div>\n      </div>\n\n      <div className=\"Page\">\n        <article className=\"card article\" id=\"content\">\n          <header className=\"header\" style={{ paddingTop: '1em', paddingBottom: '2em' }}>\n          </header>\n          <div className=\"content\" itemProp=\"articleBody\">\n            {renderAst(post.htmlAst)}\n          </div>\n        </article>\n      </div>\n\n\n    </MainLayout>\n\n\n  )\n}\n\nexport const pageQuery = graphql`\n    query PageByPath($path: String!) {\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n              htmlAst # previously \\`html\\`\n            frontmatter {\n                path\n                title\n                language\n            }\n        }\n    }`\n","import React from 'react';\nimport Lightbox from 'react-image-lightbox'\nimport 'react-image-lightbox/style.css' // This only needs to be imported once in your app\nimport PropTypes from 'prop-types'\nimport './PhotoGrid.scss';\n\n// DIRTY test for custom component.\n/*\n\nThe problem here :\n\nWe want to fetch the res from the markdown folder but graphql queries runned here cannot take any variable and doesnt have access to gatsby context\nThe only way I found to keep a clean syntax is to insert img tags directly in the markdown, they will be transformed by gatsby image (so responsive stuff and all)\nand then those urls can be used (props.href)\n */\n\nfunction styleBackgroundPhoto(src) {\n  return {\n    backgroundImage: 'url(' + src + ')',\n  }\n}\n\nconst photoGridProptypes = { gatsbyImages: PropTypes.array.isRequired }\nclass PhotoGrid extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      photoIndex: 0,\n      isOpen: false,\n    }\n  }\n\n  generatePicture(picture, index, margin) {\n    let className = margin ? `photoThumbnail marginRight` : `photoThumbnail`\n    return (\n      <div key={index} className={className} style={styleBackgroundPhoto(picture)}\n           onClick={() => this.setState({ isOpen: true, photoIndex: index })}/>\n    )\n  }\n\n  //numberPerRow is a WIP, needs changes in sass too\n  generateGrid(pictures, numberPerRow = 3) {\n\n    let photoGrid = []\n    for (let i = 0; i < pictures.length; i += numberPerRow) {\n\n      let photoRow = []\n\n      for (let columnIndex = 0; columnIndex < numberPerRow && i + columnIndex < pictures.length; columnIndex++) {\n        // handle margin right\n        if (columnIndex < numberPerRow) {\n          photoRow.push(this.generatePicture(pictures[i + columnIndex], i + columnIndex, true))\n        } else {\n          photoRow.push(this.generatePicture(pictures[i + columnIndex], i + columnIndex, false))\n        }\n      }\n      photoGrid.push(\n        <div key={i} className=\"photoRowContainer\">\n          {photoRow}\n        </div>,\n      )\n      photoRow = []\n    }\n    return photoGrid\n  }\n\n\n  render() {\n\n    const { isOpen, photoIndex } = this.state\n    const images = this.props.gatsbyImages;\n\n    return (\n      <div className=\"componentPhotoGrid\">\n        {isOpen && (\n\n          <Lightbox\n            mainSrc={images[photoIndex]}\n            nextSrc={images[(photoIndex + 1) % images.length]}\n            prevSrc={images[(photoIndex + images.length - 1) % images.length]}\n            onCloseRequest={() => this.setState({ isOpen: false })}\n            onMovePrevRequest={() =>\n              this.setState({\n                photoIndex: (photoIndex + images.length - 1) % images.length,\n              })\n            }\n            onMoveNextRequest={() =>\n              this.setState({\n                photoIndex: (photoIndex + 1) % images.length,\n              })\n            }\n          />\n        )}\n\n        <div className=\"photoGrid\">\n          {this.generateGrid(this.props.gatsbyImages)}\n        </div>\n      </div>\n\n    )\n  }\n\n}\n\nPhotoGrid.propTypes = photoGridProptypes;\n\n\nfunction PhotoGridGatsbyMethod({ children }) {\n  const photos = children.filter(child => typeof child !== 'string');\n  const srcs = photos.map(photo => photo.props.href);\n  return (\n    <PhotoGrid gatsbyImages={srcs} />\n  );\n}\n\nPhotoGridGatsbyMethod.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default PhotoGridGatsbyMethod;"],"sourceRoot":""}