{"version":3,"file":"component---src-layout-mdx-article-tsx-aeaa4f7ca772f492b1fb.js","mappings":"s3BAeA,IAAMA,IAAqC,GACzCC,WAAY,OACZC,YAAa,OACbC,UAAW,OACXC,QAAS,OACTC,SAAU,OAGVC,eAAgB,kBACfC,EAAAA,EAAAA,IAAc,UAAW,CAExBD,eAAgB,eAChBH,UAAW,OAZ4B,EAezCK,EAfyC,QAgBpCC,EAAAA,EAAAA,GAAW,YAhByB,QAiBvCC,MAAO,QACPC,QAAS,SACTC,aAAc,WACdC,aAAc,SACbN,EAAAA,EAAAA,IAAc,UAAW,GArBa,OA4B5B,SAASO,EAAT,GAA6D,IAAjCC,EAAgC,EAAxCC,KAAQD,IAAOE,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YAClDC,EAAqCD,EAArCC,aAAcC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SAG1BC,EAAmBH,GACvB,QAAC,EAAAI,KAAD,CAAMC,GAAOL,EAAaM,YAAYC,KAA9B,YAAR,KACKP,EAAaM,YAAYE,QAG9B,oBAEIC,EAAeR,EACnBA,IACE,QAAC,EAAAG,KAAD,CAAMC,GAAOJ,EAASK,YAAYC,KAA1B,YACLN,EAASK,YAAYE,MADxB,OAKF,oBAGFE,QAAQC,IAAIf,EAAIU,aAChB,IAAMM,EAAqBhB,EAAIU,YAAYO,UAAYjB,EAAIU,YAAYQ,KAEvE,OACE,QAAC,IAAD,CAAYC,SAAUnB,EAAIU,YAAYS,SAAUjB,SAAQ,KAAOA,KAC7D,QAAC,IAAD,CACEU,MAAOZ,EAAIU,YAAYE,MACvBQ,YAAapB,EAAIU,YAAYU,aAAepB,EAAIU,YAAYW,SAC5DC,MAAOtB,EAAIU,YAAYY,MAAMC,gBAAgBC,MAAMC,IACnDC,SAAU1B,EAAIU,YAAYC,KAC1BgB,SAAS,EACTrB,SAAUA,KAEZ,eAAKsB,UAAU,YAAYC,GAAG,YAC5B,eAAKD,UAAU,YACb,cAAIA,UAAU,aAAa5B,EAAIU,YAAYE,QAC3C,cAAIgB,UAAU,YACZ,kBACE,sBAAS5B,EAAIU,YAAYW,SAAzB,MACA,mBAAO,KACLL,IAAsB,kBACrB,IAAIc,KAAK9B,EAAIU,YAAYQ,MAAMa,mBAC9B/B,EAAIU,YAAYS,SAChB,CAAEa,KAAM,UAAWC,MAAO,OAAQC,IAAK,aAG1ClB,IACD,kBACI,IAAIc,KAAK9B,EAAIU,YAAYQ,MAAMa,mBAC/B/B,EAAIU,YAAYS,SAChB,CAAEc,MAAO,OAAQC,IAAK,YAEvB,MACA,IAAIJ,KAAK9B,EAAIU,YAAYO,SAASc,mBACjC/B,EAAIU,YAAYS,SAChB,CAAEa,KAAM,UAAWC,MAAO,OAAQC,IAAK,iBAOjD,eAAKC,IAAKlD,GACPsB,EACAM,KAIL,eAAKe,UAAU,OAAOO,IAAK,SAACC,GAAD,OAAWC,EAAAA,EAAAA,IAAcD,MAClD,mBACER,UAAU,OACVU,WAAS,EACTC,SAAS,kCAET,eAAKX,UAAU,YACb,oBACA,oBACA,QAAC,EAAAY,YAAD,CAAaC,WAAYC,EAAAA,KACvB,QAAC,EAAAC,YAAD,CACEC,aAAc5C,EAAIU,YAAYmC,qBAC9BC,YAAa9C,EAAIU,YAAYqC,qBAE5B/C,EAAIgD,QAGT,eAAKpB,UAAU,iBACZrB,EACAM","sources":["webpack://livedrawingproject-showcase/./src/layout/MdxArticle.tsx"],"sourcesContent":["import React from 'react';\nimport MainLayout from './MainLayout';\nimport './BasicPage.scss';\nimport 'moment';\nimport { MDXContext, MDXProvider } from '@mdx-js/react';\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\nimport SEO from '../bits/SEO/SEO';\nimport { graphql, Link } from 'gatsby';\nimport { SHORTCODES } from './MdxBits';\n\nimport { CSSObject, Theme } from '@emotion/react'\nimport './BasicPage.scss'\n\nimport { injectLinkCSS, breakpointKey, themedACSS } from '../bits/styles/styles'\n\nconst nextPrevLinkInsideCoverCSS: CSSObject = {\n  marginLeft: '2rem',\n  marginRight: '2rem',\n  marginTop: '4rem',\n  display: 'flex',\n  flexWrap: 'wrap',\n  //filter: grayscale(1);\n\n  justifyContent: 'space-around',\n  [breakpointKey('small')]: {\n    // better style in case it takes two lines\n    justifyContent: 'space-around',\n    marginTop: '2em',\n  },\n\n  a: {\n    ...themedACSS('#ffffff'),\n    color: 'white',\n    padding: '0.75em',\n    textOverflow: 'ellipsis',\n    marginBottom: '1em',\n    [breakpointKey('small')]: {\n      // better style in case it takes two lines\n      // padding: 0.2em;\n    },\n  },\n}\n\nexport default function Template({ data: { mdx }, location, pageContext }) {\n  const { previousPost, nextPost, langCode } = pageContext;\n\n  // content is at false is no previous or next\n  const previousPostHtml = previousPost ? (\n    <Link to={`${previousPost.frontmatter.path}#content`}>\n      ← {previousPost.frontmatter.title}\n    </Link>\n  ) : (\n    <div></div>\n  )\n  const nextPostHtml = nextPost ? (\n    nextPost && (\n      <Link to={`${nextPost.frontmatter.path}#content`}>\n        {nextPost.frontmatter.title} →\n      </Link>\n    )\n  ) : (\n    <div></div>\n  );\n\n  console.log(mdx.frontmatter);\n  const runForMultipleDays = mdx.frontmatter.endDate !== mdx.frontmatter.date;\n\n  return (\n    <MainLayout language={mdx.frontmatter.language} location={{ ...location }}>\n      <SEO\n        title={mdx.frontmatter.title}\n        description={mdx.frontmatter.description || mdx.frontmatter.subtitle}\n        image={mdx.frontmatter.image.childImageSharp.fixed.src}\n        pathname={mdx.frontmatter.path}\n        article={true}\n        langCode={langCode}\n      />\n      <div className=\"coverBand\" id=\"content\">\n        <div className=\"overlay\">\n          <h1 className=\"punchline\">{mdx.frontmatter.title}</h1>\n          <h2 className=\"subtext\">\n            <p>\n              <strong>{mdx.frontmatter.subtitle} </strong>\n              <br />{' '}\n              {!runForMultipleDays && <em>\n                {new Date(mdx.frontmatter.date).toLocaleDateString(\n                  mdx.frontmatter.language,\n                  { year: 'numeric', month: 'long', day: 'numeric' }\n                )}\n              </em>}\n              {runForMultipleDays &&\n              <em>\n                 {new Date(mdx.frontmatter.date).toLocaleDateString(\n                  mdx.frontmatter.language,\n                  { month: 'long', day: 'numeric' }\n                )}\n                {' → '}\n                {new Date(mdx.frontmatter.endDate).toLocaleDateString(\n                  mdx.frontmatter.language,\n                  { year: 'numeric', month: 'long', day: 'numeric' }\n                )}\n              </em>}\n            </p>\n          </h2>\n          \n        </div>\n        <div css={nextPrevLinkInsideCoverCSS}>\n          {previousPostHtml}\n          {nextPostHtml}\n        </div>\n      </div>\n\n      <div className=\"Page\" css={(theme) => injectLinkCSS(theme)}>\n        <article\n          className=\"card\"\n          itemScope\n          itemType=\"http://schema.org/BlogPosting\"\n        >\n          <div className=\"article\">\n            <br />\n            <br />\n            <MDXProvider components={SHORTCODES}>\n              <MDXRenderer\n                remoteImages={mdx.frontmatter.embeddedImagesRemote}\n                localImages={mdx.frontmatter.embeddedImagesLocal}\n              >\n                {mdx.body}\n              </MDXRenderer>\n            </MDXProvider>\n            <div className=\"prevNextLinks\">\n              {previousPostHtml}\n              {nextPostHtml}\n            </div>\n          </div>\n        </article>\n      </div>\n    </MainLayout>\n  );\n}\n\n//  <div className=\"content\" itemProp=\"articleBody\" dangerouslySetInnerHTML={{ __html: post.html }}/>\n\nexport const pageQuery = graphql`\n  query MdxArticleByPath($path: String!) {\n    mdx(frontmatter: { path: { eq: $path } }) {\n      body\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        endDate(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        subtitle\n        language\n        description\n        embeddedImagesRemote {\n          ...modernGatImage\n        }\n        embeddedImagesLocal {\n          ...modernGatImage\n        }\n        image {\n          childImageSharp {\n            # Other options include height (set both width and height to crop),\n            # grayscale, duotone, rotate, etc.\n            fixed(width: 700) {\n              # Choose either the fragment including a small base64ed image, a traced placeholder SVG, or one without.\n              ...GatsbyImageSharpFixed\n              src\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["nextPrevLinkInsideCoverCSS","marginLeft","marginRight","marginTop","display","flexWrap","justifyContent","breakpointKey","a","themedACSS","color","padding","textOverflow","marginBottom","Template","mdx","data","location","pageContext","previousPost","nextPost","langCode","previousPostHtml","Link","to","frontmatter","path","title","nextPostHtml","console","log","runForMultipleDays","endDate","date","language","description","subtitle","image","childImageSharp","fixed","src","pathname","article","className","id","Date","toLocaleDateString","year","month","day","css","theme","injectLinkCSS","itemScope","itemType","MDXProvider","components","SHORTCODES","MDXRenderer","remoteImages","embeddedImagesRemote","localImages","embeddedImagesLocal","body"],"sourceRoot":""}