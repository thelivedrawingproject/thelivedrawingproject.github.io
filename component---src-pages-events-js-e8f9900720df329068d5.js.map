{"version":3,"file":"component---src-pages-events-js-e8f9900720df329068d5.js","mappings":"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","sources":["webpack://livedrawingproject-showcase/./src/bits/PostGridFlatTLDP/PostGridFlat.tsx","webpack://livedrawingproject-showcase/./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack://livedrawingproject-showcase/./src/pages/events.js"],"sourcesContent":["import { CSSObject, keyframes } from '@emotion/react';\nimport { Link } from 'gatsby';\nimport './PostGridFlat.scss';\nimport { BgImage } from 'gbimage-bridge';\nimport { getImage } from 'gatsby-plugin-image';\n\nconst gridCSS: CSSObject = {\n  margin: 'auto',\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'center',\n  flexWrap: 'wrap',\n  maxWidth: '90rem',\n  // height: 30em;\n  width: '100%',\n\n  padding: 0,\n};\nconst pulse = keyframes`\n0%{\n  box-shadow: 0px 0px 5px 0px rgba(87, 186, 106, .3);\n}\n65%{\n  box-shadow: 0px 0px 5px 8px rgba(87, 186, 106, .3);\n}\n90%{\n  box-shadow: 0px 0px 5px 8px rgba(87, 186, 106, 0);\n}\n`\n\n\ninterface OwnProps {\n  posts: any;\n}\nexport default function PostGridFlat({ posts }: OwnProps) {\n\n  return (\n    <div css={gridCSS}>\n      {posts\n        .filter((post) => post.node.frontmatter.title.length > 0)\n        .map(({ node: post }) => {\n          const image = post.frontmatter.image.childImageSharp;\n          const gatsbyImage = getImage(image);\n          const postDate = new Date(post.frontmatter.date);\n          \n\n          const tomorrow = new Date();\n          // Make keep current day as an upcoming day\n          postDate.setDate(postDate.getDate() + 1);\n          const isUpcoming = tomorrow < postDate;\n          \n          const options = { weekday: isUpcoming ? 'short' : void 0, year: isUpcoming ? void 0 : 'numeric', month: 'short', day: isUpcoming ? 'numeric' : void 0 };\n          // @ts-ignore\n          const displayDate = new Date(post.frontmatter.date).toLocaleDateString(post.frontmatter.language, options);\n          \n          return (\n            <Link\n              className={'post'}\n              to={`${post.frontmatter.path}#content`}\n              key={post.id}\n            >\n               \n              <div className={'postHead'}>\n                <span className=\"postTitle\">\n               \n                  {post.frontmatter.title}</span>\n                <span className=\"postSubtitle\" css={{display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}>\n                  \n                  <div>\n                  {post.frontmatter.subtitle}{' '}\n                  </div>\n\n                   <div css={{display: 'flex', alignItems: 'center', color: isUpcoming ? 'rgb(87, 186, 106)' : '', fontWeight: isUpcoming ? 600: 400 }}>\n                   {isUpcoming &&<div css={{\n                  \twidth: '10px',\n                    height: '10px',\n                    fontSize: '0',\n                    backgroundColor: 'rgb(87, 186, 106)',\n                    border: '0',\n                    borderRadius: '100px',\n                    // margin: '18px',\n                    marginRight: '10px',\n                    outline: 'none',\n                    animationName: `${pulse}`,\n                    animationDuration: '1.5s',\n                    animationIterationCount: 'infinite',\n                    animationTimingFunction: 'linear',\n                }}></div>}\n                {displayDate}{' '}\n                </div>\n\n                </span>\n    \n\n              </div>\n              <BgImage image={gatsbyImage} className={'postPicture'} />\n            </Link>\n          );\n        })}\n    </div>\n  );\n}\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}","import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport MainLayout from '../layout/MainLayout';\nimport SEO from '../bits/SEO/SEO';\nimport { indexPageStrings } from '../locales/strings';\nimport PostGridFlat from '../bits/PostGridFlatTLDP/PostGridFlat';\nimport './index.scss';\nimport './basics.scss';\nimport './ShowcasePage.scss';\n\nconst numberOfEventsToShow = 6;\nconst icon = {\n  hidden: {\n    opacity: 1,\n    pathLength: 0,\n    fill: 'rgba(0,0,0,0',\n    stroke: 'rgba(0,0,0,0)',\n    strokeWidth: 2,\n  },\n  visible: {\n    opacity: 1,\n    pathLength: 1,\n    fill: 'rgba(0,0,0,0',\n    stroke: 'white',\n    strokeWidth: 2,\n  },\n};\n\n/*\n        <div className={'ResponsiveContainer SpecialAnnouncementBackground'}>\n          <div className={'Inside'}>\n            <div className=\"ShowcasePart Column\">\n              <div className={'Text Centered SpecialAnnouncement'}>\n                <h2\n                  className={'SpecialAnnouncementTitle'}\n                  style={{ color: 'white' }}\n                >\n                  {LOCAL.announcementTitle}\n                </h2>\n                <p\n                  className={'SpecialAnnouncementSubtitle'}\n                  style={{ color: 'white' }}\n                >\n                  {LOCAL.announcemenSubtitle}\n                </p>\n                <Link to={onlineModeLink[langCode].path}>\n                  {onlineModeLink[langCode].name}\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        */\nexport default function Events({ data, pageContext: { langCode }, location }) {\n  const LOCAL = indexPageStrings[langCode];\n  const posts = data.allMdx.edges;\n  const localesOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n\n  return (\n    <MainLayout language={langCode} location={{ ...location }}>\n      <SEO title={'Events'} langCode={langCode} />\n\n      <div className={'ShowcasePage'}>\n      \n\n\n        <h2 className={'Punchline'}>{LOCAL.events}</h2>\n        <div className=\"home homePosts\">\n          <PostGridFlat\n            posts={posts\n              .filter((post) => post.node.frontmatter.title.length > 0)\n              .filter((post) => post.node.frontmatter.language === langCode)\n              .filter((post, index) => {\n                return index < numberOfEventsToShow;\n              })}\n          />\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              marginTop: '1rem',\n            }}\n          >\n            <button\n              id=\"showAllEventsButton\"\n              className={'greenButton'}\n              style={{ marginTop: '2em' }}\n              onClick={() => {\n                let t = document.getElementById('oldEvents');\n                t.style.display = '';\n                let d = document.getElementById('showAllEventsButton');\n                d.style.display = 'none';\n              }}\n            >\n              {LOCAL.showMoreEvents}\n            </button>\n          </div>\n          <div className=\"postGrid\" id=\"oldEvents\" style={{ display: 'none' }}>\n            <PostGridFlat\n              posts={posts\n                .filter((post) => post.node.frontmatter.title.length > 0)\n                .filter((post) => post.node.frontmatter.language === langCode)\n                .filter((post, index) => {\n                  return numberOfEventsToShow <= index;\n                })}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"home homePosts\">\n        <div className=\"moreProjects\">\n          <Link to={'/booking'}>{LOCAL.goToAbout}</Link>\n        </div>\n      </div>\n    </MainLayout>\n  );\n}\n\nexport const eventPageQuery = graphql`\n  query EventsQuery {\n    backgrounds: allFile(filter: { absolutePath: { regex: \"/backgrounds/\" } }) {\n      nodes {\n        relativePath\n        childImageSharp {\n          fluid(maxWidth: 1400, quality: 100) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n    imagePhone: file(relativePath: { eq: \"gallery/showcase/phone.jpg\" }) {\n      ...modernGatImage\n    }\n    imageChevagny: file(relativePath: { eq: \"gallery/showcase/chev.jpg\" }) {\n      ...modernGatImage\n    }\n    imageArt: file(relativePath: { eq: \"gallery/showcase/permanent.jpg\" }) {\n      ...modernGatImage\n    }\n    imageRemote: file(relativePath: { eq: \"gallery/showcase/remote.jpg\" }) {\n      ...modernGatImage\n    }\n    gridA: file(relativePath: { eq: \"gallery/showcase/cn.jpg\" }) {\n      ...modernGatImage\n    }\n    gridB: file(relativePath: { eq: \"gallery/showcase/b.jpg\" }) {\n      ...modernGatImage\n    }\n    gridC: file(relativePath: { eq: \"gallery/showcase/glow1.jpg\" }) {\n      ...modernGatImage\n    }\n    gridD: file(relativePath: { eq: \"gallery/showcase/glow2.jpg\" }) {\n      ...modernGatImage\n    }\n    gridE: file(relativePath: { eq: \"gallery/showcase/chev0.jpg\" }) {\n      ...modernGatImage\n    }\n    gridF: file(relativePath: { eq: \"gallery/showcase/chev.jpg\" }) {\n      ...modernGatImage\n    }\n    gridG: file(relativePath: { eq: \"2020-04-01-stayhome/26v_2_webw.jpg\" }) {\n      ...modernGatImage\n    }\n    gridH: file(\n      relativePath: { eq: \"2020-03-05-spraying-board/SprayingBoard_8.jpg\" }\n    ) {\n      ...modernGatImage\n    }\n    gridI: file(relativePath: { eq: \"2019-10-20-mur/CHRD-5.jpg\" }) {\n      ...modernGatImage\n    }\n    allMdx(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { category: { eq: \"event\" } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            endDate(formatString: \"MMMM DD, YYYY\")\n            path\n            category\n            subtitle\n            language\n            image {\n              childImageSharp {\n                gatsbyImageData(height: 500, placeholder: BLURRED)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["strings","raw","gridCSS","margin","display","flexDirection","justifyContent","flexWrap","maxWidth","width","padding","pulse","keyframes","slice","PostGridFlat","posts","css","filter","post","node","frontmatter","title","length","map","image","childImageSharp","gatsbyImage","getImage","postDate","Date","date","tomorrow","setDate","getDate","isUpcoming","options","weekday","year","month","day","displayDate","toLocaleDateString","language","Link","className","to","path","key","id","subtitle","alignItems","color","fontWeight","height","fontSize","backgroundColor","border","borderRadius","marginRight","outline","animationName","animationDuration","animationIterationCount","animationTimingFunction","Events","data","langCode","pageContext","location","LOCAL","indexPageStrings","allMdx","edges","events","index","style","marginTop","onClick","document","getElementById","showMoreEvents","goToAbout"],"sourceRoot":""}