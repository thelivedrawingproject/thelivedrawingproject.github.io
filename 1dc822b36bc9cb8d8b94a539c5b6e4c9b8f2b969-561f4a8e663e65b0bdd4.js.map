{"version":3,"file":"1dc822b36bc9cb8d8b94a539c5b6e4c9b8f2b969-561f4a8e663e65b0bdd4.js","mappings":"gOAMA,ICNoDA,EAASC,EDMvDC,EAAqB,CACzBC,OAAQ,OACRC,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,SAAU,OACVC,SAAU,QAEVC,MAAO,OAEPC,QAAS,GAELC,GAAQC,EAAAA,EAAAA,IAAH,IClByCZ,EDkBzC,qMCjBJC,IACHA,EAAMD,EAAQa,MAAM,IAGtBb,EAAQC,IAAMA,EDaL,ECZFD,I,yFD2BM,SAASc,EAAT,GAA2C,IAAnBC,EAAmB,EAAnBA,MACrC,OACE,eAAKC,IAAKd,GACPa,EACEE,QAAO,SAACC,GAAD,OAAUA,EAAKC,KAAKC,YAAYC,MAAMC,OAAS,KACtDC,KAAI,YAAoB,IAAXL,EAAW,EAAjBC,KACAK,EAAQN,EAAKE,YAAYI,MAAMC,gBAC/BC,GAAcC,EAAAA,EAAAA,GAASH,GACvBI,EAAW,IAAIC,KAAKX,EAAKE,YAAYU,MAErCC,EAAW,IAAIF,KAErBD,EAASI,QAAQJ,EAASK,UAAY,GACtC,IAAMC,EAAaH,EAAWH,EAExBO,EAAU,CACdC,QAASF,EAAa,aAAU,EAChCG,KAAMH,OAAa,EAAS,UAC5BI,MAAO,QACPC,IAAKL,EAAa,eAAY,GAG1BM,EAAc,IAAIX,KACtBX,EAAKE,YAAYU,MACjBW,mBAAmBvB,EAAKE,YAAYsB,SAAUP,GAEhD,OACE,QAAC,EAAAQ,KAAD,CACEC,UAAW,OACXC,GAAO3B,EAAKE,YAAY0B,KAAtB,WACFC,IAAK7B,EAAK8B,KAEV,eAAKJ,UAAW,aACd,gBAAMA,UAAU,aAAa1B,EAAKE,YAAYC,QAC9C,gBACEuB,UAAU,eACV5B,IAAG,IAMH,mBAAME,EAAKE,YAAY6B,SAAvB,MAEA,eACEjC,KAAG,QAAE,CACHZ,QAAS,OACT8C,WAAY,SACZC,MAAOjB,EAAa,oBAAsB,GAC1CkB,WAAYlB,EAAa,IAAM,KAJ9B,KAOFA,IACC,eACElB,KAAG,QAAE,CACHP,MAAO,OACP4C,OAAQ,OACRC,SAAU,IACVC,gBAAiB,oBACjBC,OAAQ,IACRC,aAAc,QAEdC,YAAa,OACbC,QAAS,OACTC,cAAe,GAAGjD,EAClBkD,kBAAmB,OACnBC,wBAAyB,WACzBC,wBAAyB,UAbxB,MAiBNvB,EAAa,QAIpB,QAAC,KAAD,CAAShB,MAAOE,EAAakB,UAAW","sources":["webpack://livedrawingproject-showcase/./src/bits/PostGridFlatTLDP/PostGridFlat.tsx","webpack://livedrawingproject-showcase/./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js"],"sourcesContent":["import { CSSObject, keyframes } from '@emotion/react';\nimport { Link } from 'gatsby';\nimport './PostGridFlat.scss';\nimport { BgImage } from 'gbimage-bridge';\nimport { getImage } from 'gatsby-plugin-image';\n\nconst gridCSS: CSSObject = {\n  margin: 'auto',\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'center',\n  flexWrap: 'wrap',\n  maxWidth: '90rem',\n  // height: 30em;\n  width: '100%',\n\n  padding: 0,\n};\nconst pulse = keyframes`\n0%{\n  box-shadow: 0px 0px 5px 0px rgba(87, 186, 106, .3);\n}\n65%{\n  box-shadow: 0px 0px 5px 8px rgba(87, 186, 106, .3);\n}\n90%{\n  box-shadow: 0px 0px 5px 8px rgba(87, 186, 106, 0);\n}\n`;\n\ninterface OwnProps {\n  posts: any;\n}\nexport default function PostGridFlat({ posts }: OwnProps) {\n  return (\n    <div css={gridCSS}>\n      {posts\n        .filter((post) => post.node.frontmatter.title.length > 0)\n        .map(({ node: post }) => {\n          const image = post.frontmatter.image.childImageSharp;\n          const gatsbyImage = getImage(image);\n          const postDate = new Date(post.frontmatter.date);\n\n          const tomorrow = new Date();\n          // Make keep current day as an upcoming day\n          postDate.setDate(postDate.getDate() + 1);\n          const isUpcoming = tomorrow < postDate;\n\n          const options = {\n            weekday: isUpcoming ? 'short' : void 0,\n            year: isUpcoming ? void 0 : 'numeric',\n            month: 'short',\n            day: isUpcoming ? 'numeric' : void 0,\n          };\n          // @ts-ignore\n          const displayDate = new Date(\n            post.frontmatter.date\n          ).toLocaleDateString(post.frontmatter.language, options);\n\n          return (\n            <Link\n              className={'post'}\n              to={`${post.frontmatter.path}#content`}\n              key={post.id}\n            >\n              <div className={'postHead'}>\n                <span className=\"postTitle\">{post.frontmatter.title}</span>\n                <span\n                  className=\"postSubtitle\"\n                  css={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                  }}\n                >\n                  <div>{post.frontmatter.subtitle} </div>\n\n                  <div\n                    css={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      color: isUpcoming ? 'rgb(87, 186, 106)' : '',\n                      fontWeight: isUpcoming ? 600 : 400,\n                    }}\n                  >\n                    {isUpcoming && (\n                      <div\n                        css={{\n                          width: '10px',\n                          height: '10px',\n                          fontSize: '0',\n                          backgroundColor: 'rgb(87, 186, 106)',\n                          border: '0',\n                          borderRadius: '100px',\n                          // margin: '18px',\n                          marginRight: '10px',\n                          outline: 'none',\n                          animationName: `${pulse}`,\n                          animationDuration: '1.5s',\n                          animationIterationCount: 'infinite',\n                          animationTimingFunction: 'linear',\n                        }}\n                      ></div>\n                    )}\n                    {displayDate}{' '}\n                  </div>\n                </span>\n              </div>\n              <BgImage image={gatsbyImage} className={'postPicture'} />\n            </Link>\n          );\n        })}\n    </div>\n  );\n}\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}"],"names":["strings","raw","gridCSS","margin","display","flexDirection","justifyContent","flexWrap","maxWidth","width","padding","pulse","keyframes","slice","PostGridFlat","posts","css","filter","post","node","frontmatter","title","length","map","image","childImageSharp","gatsbyImage","getImage","postDate","Date","date","tomorrow","setDate","getDate","isUpcoming","options","weekday","year","month","day","displayDate","toLocaleDateString","language","Link","className","to","path","key","id","subtitle","alignItems","color","fontWeight","height","fontSize","backgroundColor","border","borderRadius","marginRight","outline","animationName","animationDuration","animationIterationCount","animationTimingFunction"],"sourceRoot":""}