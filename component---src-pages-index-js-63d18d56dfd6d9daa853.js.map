{"version":3,"sources":["webpack:///../src/index.js","webpack:///./src/pages/index.js"],"names":["BackgroundSlider","callbacks","images","duration","transition","initDelay","query","children","gatsbyImageProps","nodes","bgRefs","subRefs","bgWrappers","subWrappers","style","imageProps","data","this","backgrounds","find","node","imgs","map","backgroundStyle","top","index","subStyle","React","key","ref","fluid","useState","timeoutHandle","setTimeoutHandle","timeoutHandleRef","useRef","setIndex","indexRef","getCount","bgRef","subRef","length","callback","prevIndex","setTimeout","newIndex","Index","locale","pageContext","location","LOCAL","indexPageStrings","posts","allMarkdownRemark","edges","postGrid","announcementLinkName","post","className","onClick","navigate","frontmatter","path","id","backgroundImage","image","childImageSharp","src","title","subtitle","MainLayout","language","MetaTags","backgroundColor","xmlns","viewBox","data-name","fill","d","points","mainDescription","color","yourPhoneYourCanvasTitle","yourPhoneYourCanvasDescription","imagePhone","alt","joinCollabTitle","joinCollabDescription","PhotoGrid","gatsbyImages","gridA","gridB","gridC","gridD","gridE","gridF","gridG","gridH","gridI","covidProofTitle","covidProofDescription","imageRemote","events","filter","display","justifyContent","marginTop","document","getElementById","showMoreEvents","gatImage","indexPageQuery"],"mappings":"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","file":"component---src-pages-index-js-63d18d56dfd6d9daa853.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Img from \"gatsby-image\"\r\n\r\n/**\r\n * @param {object} props Component props\r\n * @param {object} props.callbacks interface for callback functions (pass this to Pagination, if used)\r\n * @param {(newIndex:number) => void} props.callbacks.atIndex sets background to specified index\r\n * @param {(prevIndex: number, newIndex: number) => void} props.callbacks.onChange user-provided callback fired when background image changes\r\n * @param {Function} props.callbacks.next sets background to the next one\r\n * @param {Function} props.callbacks.prev sets background to the previous one \r\n * @param {string[]} props.images list of specified image file names to set order\r\n * @param {number} [props.duration=5] duration background is shown for\r\n * @param {number} [props.transition=2] length of transition\r\n * @param {object.isRequired} props.query result of GraphQL query for images\r\n * @param {JSXElement[]} props.children subtitles/captions in sync for respective background images;\r\n * (<React.Fragment/> to skip over one)\r\n * @param {Array} props.gatsbyImageProps remaining props spread onto Img elements\r\n * @param {number} [props.initDelay=5] initial delay before first transition\r\n */\r\nconst BackgroundSlider = ({callbacks, images, duration, transition, initDelay, query, children, ...gatsbyImageProps}) => {\t\r\n\tlet nodes = [];\r\n\tlet bgRefs = [];\r\n\tlet subRefs = [];\t\r\n\tlet bgWrappers = [];\r\n\tlet subWrappers = [];\r\n\tconst {style, ...imageProps} = gatsbyImageProps;    \r\n\r\n\tnodes.safePush = function(data){\r\n\t\tif(data){\r\n\t\t\treturn this.push(data);\r\n\t\t}else{\r\n\t\t\treturn this.length;\r\n\t\t}\r\n\t}\r\n\t\r\n\tif(images){\r\n\t\tfor(let image of images){\r\n\t\t\tnodes.safePush(\r\n\t\t\t\tquery.backgrounds.nodes.find(\r\n\t\t\t\t\tnode => node.relativePath === image\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t}\r\n\t}else{\r\n\t\tnodes = query.backgrounds.nodes;\r\n\t}\r\n\t\r\n\tconst imgs = nodes.map(\r\n\t\t(data, index)=>{\t\t\t\r\n\t\t\tconst backgroundStyle = {\r\n\t\t\t\tposition:\"absolute\", \r\n\t\t\t\tzIndex: -10,\r\n\t\t\t\twidth:\"100%\", \r\n\t\t\t\theight: \"100%\", \r\n\t\t\t\tmargin:0, \r\n\t\t\t\tpadding:\"none\", \r\n\t\t\t\tleft:0, top:0, \r\n\t\t\t\tbackgroundSize:\"cover\", \r\n\t\t\t\topacity: index ? 0 : 1, \r\n\t\t\t\ttransition: `opacity ${transition}s`\r\n\t\t\t};\r\n\r\n\t\t\tconst subStyle = {\r\n\t\t\t\topacity: index ? 0 : 1, \r\n\t\t\t\ttransition: `opacity ${transition}s`, \r\n\t\t\t\tpointerEvents: index ? \"none\" : \"auto\"\r\n\t\t\t}\r\n\r\n\t\t\tsubRefs[index] = React.createRef();\r\n\t\t\tbgRefs[index] = React.createRef();\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<React.Fragment key={index}>\r\n\t\t\t\t\t<div ref={bgRefs[index]}><Img fluid={data.childImageSharp.fluid} style={{...backgroundStyle, ...style}} {...imageProps}/></div>\r\n\t\t\t\t\t<div ref={subRefs[index]} style={subStyle}>{React.Children.toArray(children)[index]}</div>\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t);\r\n\t\t} \r\n\t);\r\n    \r\n    const [timeoutHandle, setTimeoutHandle] = useState(0);\r\n    const timeoutHandleRef = useRef(timeoutHandle);\r\n    timeoutHandleRef.current = timeoutHandle;\r\n    const [index, setIndex] = useState(0);\r\n    const indexRef = useRef(index);\r\n\tindexRef.current = index;\r\n\t\r\n\tif (callbacks) callbacks.getCount = () => imgs.length;\r\n\r\n\tconst initEffect = () => {\r\n\t\tbgRefs.forEach((bgRef) => {\r\n\t\t\tbgWrappers.push(bgRef.current.firstElementChild);\t\t\t\r\n\t\t});\r\n\r\n\t\tsubRefs.forEach((subRef) =>{\r\n\t\t\tsubWrappers.push(subRef.current);\r\n\t\t})\r\n\t\t\r\n        const length = bgWrappers.length;\r\n\t\tconst callback = function(){     \r\n            const index = indexRef.current;\r\n\t\t\t\r\n\t\t\tbgWrappers[index].style.opacity = 0;\r\n\t\t\tbgWrappers[(index + 1) % length].style.opacity = 1;\r\n\r\n\t\t\tsubWrappers[index].style.opacity = 0;\r\n\t\t\tsubWrappers[index].style.pointerEvents = \"none\";\r\n\t\t\t\r\n\t\t\tsubWrappers[(index + 1) % length].style.opacity = 1;\r\n\t\t\tsubWrappers[(index + 1) % length].style.pointerEvents = \"auto\";\t\t\t\t\t\r\n\t\t\t\r\n\t\t\tif(callbacks && callbacks.onChange) \r\n\t\t\t{\r\n\t\t\t\tcallbacks.onChange(index, (index + 1) % length);\r\n\t\t\t}\r\n            setIndex(prevIndex => (prevIndex + 1) % length);\r\n            setTimeoutHandle(setTimeout(callback, duration * 1000));\r\n\t\t}\r\n\r\n        setTimeoutHandle(setTimeout(callback, initDelay * 1000));\r\n \r\n        if (callbacks){     \r\n            callbacks.atIndex = function (newIndex) {\r\n                const index = indexRef.current;\r\n                clearTimeout(timeoutHandleRef.current);\r\n                    \r\n                bgWrappers[index].style.opacity = 0;\r\n                bgWrappers[(newIndex) % length].style.opacity = 1;\r\n        \r\n                subWrappers[index].style.opacity = 0;\r\n                subWrappers[index].style.pointerEvents = \"none\";\r\n                \r\n                subWrappers[(newIndex) % length].style.opacity = 1;\r\n                subWrappers[(newIndex) % length].style.pointerEvents = \"auto\";\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(callbacks.onChange) \r\n\t\t\t\t{\r\n\t\t\t\t\tcallbacks.onChange(index, newIndex % length);\r\n\t\t\t\t}\r\n                setIndex((newIndex) % length);\r\n                setTimeoutHandle(setTimeout(callback, duration * 1000));        \r\n            }\r\n\r\n            callbacks.next = () => callbacks.atIndex((indexRef.current + 1) % length);\r\n\t\t\tcallbacks.prev = () => callbacks.atIndex((indexRef.current + length - 1) % length);\r\n        }\r\n\t}\r\n\t \r\n\t// Runs once after DOM is loaded; effectively `componentDidMount`\t\r\n\tuseEffect(initEffect, []);\r\n\t\r\n\treturn <React.Fragment>{imgs}</React.Fragment>\t\r\n}\r\n\r\nBackgroundSlider.defaultProps = {\r\n\timages: null,\r\n\tduration: 5,\r\n\ttransition: 2,\r\n\tinitDelay: 5,\r\n}\r\n\r\nBackgroundSlider.propTypes = {\r\n\tquery: PropTypes.object.isRequired,\r\n\timages: PropTypes.arrayOf(PropTypes.string),\r\n\tduration: PropTypes.number,\r\n\ttransition: PropTypes.number,\r\n\tinitDelay: PropTypes.number,\r\n}\r\n\r\nexport default BackgroundSlider\r\n\r\nexport const Pagination = ({callbacks}) => {\r\n\tlet buttonRefs = [];\r\n\r\n\tuseEffect(()=>{\r\n\t\tcallbacks.onChange = (prevIndex, newIndex) => { \r\n\t\t\tbuttonRefs[prevIndex].current.style.color = 'silver'; \r\n\t\t\tbuttonRefs[prevIndex].current.style.transform = 'scale(1.0,1.0)'; \r\n\t\t\tbuttonRefs[newIndex].current.style.color = 'white'; \r\n\t\t\tbuttonRefs[newIndex].current.style.transform=\"scale(1.2, 1.2)\";\r\n\t\t};\t\r\n\t},[]);\r\n\r\n\treturn(\r\n\t\t<React.Fragment>\r\n\t\t\t{Array.from(Array(callbacks.getCount()).keys()).map ((index) =>\r\n\t\t\t\t<span role='button' ref={buttonRefs[index] = React.createRef()} \r\n\t\t\t\tkey={index}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tuserSelect: 'none', \r\n\t\t\t\t\tcolor: index === 0 ? 'white' : 'silver', \r\n\t\t\t\t\tfontSize: '4em', \r\n\t\t\t\t\tcursor: 'pointer', \r\n\t\t\t\t\tdisplay: 'inline-block', \r\n\t\t\t\t\ttransform: index === 0 ? 'scale(1.2,1.2)' : 'scale(1.0)'\r\n\t\t\t\t}} \r\n\t\t\t\tonClick={() => callbacks.atIndex(index)}>&middot;</span>\r\n\t\t\t)}\r\n\t\t</React.Fragment>\r\n\t)\r\n}\r\n","import React from 'react'\nimport { Link, graphql, navigate } from 'gatsby'\nimport Img from 'gatsby-image'\nimport MainLayout from '../layout/MainLayout'\nimport MetaTags from '../bits/MetaTags/MetaTags'\nimport './index.scss'\nimport { indexPageStrings } from '../locales/strings'\nimport { PhotoGrid } from './../bits/PhotoGrid/PhotoGrid'\nimport BackgroundSlider from 'gatsby-image-background-slider'\n\nconst numberOfEventsToShow = 6\n\n/*\n        <div className={'ResponsiveContainer SpecialAnnouncementBackground'}>\n          <div className={'Inside'}>\n            <div className=\"ShowcasePart Column\">\n              <div className={'Text Centered SpecialAnnouncement'}>\n                <h2\n                  className={'SpecialAnnouncementTitle'}\n                  style={{ color: 'white' }}\n                >\n                  {LOCAL.announcementTitle}\n                </h2>\n                <p\n                  className={'SpecialAnnouncementSubtitle'}\n                  style={{ color: 'white' }}\n                >\n                  {LOCAL.announcemenSubtitle}\n                </p>\n                <Link to={onlineModeLink[locale].path}>\n                  {onlineModeLink[locale].name}\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        */\nexport default function Index({ data, pageContext: { locale }, location }) {\n  const LOCAL = indexPageStrings[locale]\n  const { edges: posts } = data.allMarkdownRemark\n  const localesOptions = { year: 'numeric', month: 'long', day: 'numeric' }\n\n  const stayHomeLink = {\n    en: { path: '/stayhome', name: LOCAL.announcementLinkName },\n    fr: { path: '/fr/stayhome', name: LOCAL.announcementLinkName },\n  }\n\n  const onlineModeLink = {\n    en: { path: '/online-mode', name: LOCAL.announcementLinkName },\n    fr: { path: '/fr/online-mode', name: LOCAL.announcementLinkName },\n  }\n  const postGrid = ({ node: post }) => {\n    const localesOptions = { year: 'numeric', month: 'long' }\n    return (\n      <div\n        className=\"post\"\n        onClick={() => {\n          navigate(post.frontmatter.path)\n        }}\n        key={post.id}\n        style={{\n          backgroundImage:\n            'url(' + post.frontmatter.image.childImageSharp.fluid.src + ')',\n        }}\n      >\n        <div className=\"insideArea\">\n          <div className=\"textArea\">\n            <span className=\"postTitle\">{post.frontmatter.title}</span>\n            <span className=\"postSubtitle\">{post.frontmatter.subtitle} </span>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  /*\n   <div\n            className={'ResponsiveContainer WelcomerCoverPhoto'}\n            style={{\n              background: `url(${data.imageChevagny.childImageSharp.fluid.src})`,\n              backgroundRepeat: 'no-repeat',\n              backgroundPosition: 'center',\n              backgroundSize: 'cover',\n            }}\n          >\n          */\n  return (\n    <MainLayout language={locale} location={{ ...location }}>\n      <MetaTags title={'Home'} />\n\n      <div className={'ShowcasePage'}>\n        <div className={'RollbackBackground'}>\n          <BackgroundSlider\n            query={data}\n            initDelay={0} // delay before the first transition (if left at 0, the first image will be skipped initially)\n            transition={1} // transition duration between images\n            duration={8} // how long an image is shown\n            style={{\n              backgroundColor: '#6d8879',\n            }}\n          />\n          <div className={'Inside'}>\n            <div className=\"WelcomeCover\">\n              <div className={'Inside'}>\n                <div className={'CoverLogo'}>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 189.4224 198.4252\"\n                  >\n                    <g\n                      id=\"b033bcea-250a-4236-8bec-3b9201489974\"\n                      data-name=\"TEXTE\"\n                      fill=\"white\"\n                    >\n                      <path d=\"M38.08,132.0853h6.63c4.5239,0,7.4882,3.042,7.4882,7.7226S49.2342,147.53,44.71,147.53H41.1219v12.7149H38.08Zm3.042,12.87H44.32c3.042,0,4.836-1.6377,4.836-5.1475s-1.794-5.1484-4.836-5.1484H41.1219Z\" />\n                      <path d=\"M55.7855,132.0853h6.7861c4.5239,0,7.7222,2.6523,7.7222,7.293,0,3.1591-1.4038,5.8115-4.524,6.9033l4.7583,13.9629H67.33l-4.5244-13.3389-3.978.1563v13.1826h-3.042Zm3.042,12.3242h2.6518c4.3682,0,5.7725-1.7158,5.7725-4.875s-1.4043-4.875-5.7725-4.875H58.8275Z\" />\n                      <path d=\"M82.4617,160.6341c-4.7583,0-7.9565-3.9775-7.9565-14.4687s3.1982-14.47,7.9565-14.47,7.9561,3.9776,7.9561,14.47S87.22,160.6341,82.4617,160.6341Zm0-26.3642c-2.73,0-4.914,2.34-4.914,11.8955s2.1836,11.8955,4.914,11.8955,4.9141-2.3408,4.9141-11.8955S85.1917,134.27,82.4617,134.27Z\" />\n                      <path d=\"M100.4793,132.0853V153.224c0,5.7724-1.95,7.41-6.9419,7.41a9.4452,9.4452,0,0,1-1.56-.2334l.2338-2.6523a5.1791,5.1791,0,0,0,1.7549.3125c2.4575,0,3.4712-1.0537,3.4712-4.1348V132.0853Z\" />\n                      <path d=\"M118.4979,132.0853V134.66h-9.8287v9.5947h7.2544v2.5743h-7.2544V157.67h10.2964v2.5742H105.6273V132.0853Z\" />\n                      <path d=\"M134.4871,140.5882c-.39-4.4463-1.7939-6.3183-4.1733-6.3183-3.5493,0-5.1089,3.12-5.1089,11.8955s1.56,11.8955,5.1089,11.8955c2.8471,0,4.4853-1.95,4.563-7.1768h3.0424c-.0781,6.24-2.8081,9.75-7.6054,9.75-5.0313,0-8.1514-3.8213-8.1514-14.4687s3.12-14.47,8.1514-14.47c4.1733,0,6.7475,2.8858,7.2153,8.8926Z\" />\n                      <path d=\"M154.7278,132.0853V134.66h-5.7719v25.585h-3.042V134.66h-5.7725v-2.5742Z\" />\n                      <path d=\"M57.9905,94.2122c0-3.8886-1.728-6-7.1045-6H47.6219v12.001H50.886C56.2625,100.2132,57.9905,98.1009,57.9905,94.2122Z\" />\n                      <path d=\"M14.34,79.5235v46.2552H174.805V79.5235Zm11.97,40.179H19.8777V85.0433H26.31c7.2968,0,11.7134,4.0322,11.7134,17.33S33.6067,119.7025,26.31,119.7025Zm31.7768,0-5.5683-16.417-4.8965.1914v16.2256H43.8777V85.0433H52.23c5.5683,0,9.5049,3.2646,9.5049,8.9766,0,3.8886-1.7281,7.1533-5.5684,8.497l5.8565,17.1856Zm23.76,0L79.7825,109.43H70.95l-2.0644,10.2725H65.1414l7.6323-34.6592h5.1846l7.6328,34.6592Zm25.8242,0h-3.1685L99.03,92.4837h-.0957l-5.4727,27.2188H90.2933l-5.76-34.6592h3.4561l4.1284,27.0742h.0962l5.1846-27.0742h3.0722l5.3765,27.0742h.0957l3.84-27.0742H113.24Zm13.1016,0h-3.7442V85.0433h3.7442Zm24.7685,0h-4.0322L130.7562,89.556H130.66v30.1465h-3.7447V85.0433h5.857l8.9287,25.5381h.0957V85.0433h3.7446Zm14.8306-2.6885c3.5044,0,5.4243-1.92,5.4243-5.4727v-4.8955h-4.7041v-3.1689h8.4487v16.2256h-2.4l-.48-2.5918a7.4152,7.4152,0,0,1-6.2886,3.0722c-6.0967,0-9.937-4.705-9.937-17.8095s3.84-17.81,9.937-17.81c6.3847,0,8.6889,5.5684,9.1689,11.1367h-3.7446c-.2881-4.5127-1.6318-7.9687-5.4243-7.9687-4.1763,0-6.1924,3.7441-6.1924,14.6416S156.1956,117.014,160.3719,117.014Z\" />\n                      <path d=\"M25.638,88.2122H23.6219v28.3223H25.638c5.4727,0,8.6406-2.3047,8.6406-14.1611S31.1107,88.2122,25.638,88.2122Z\" />\n                      <polygon points=\"75.318 87.636 71.478 106.261 79.255 106.261 75.414 87.636 75.318 87.636\" />\n                      <path d=\"M42.8846,40.598v2.5742h-5.772v25.585h-3.042V43.1722H28.2982V40.598Z\" />\n                      <path d=\"M48.8118,40.598V52.7669H57.08V40.598h3.0425V68.7572H57.08V55.3412H48.8118v13.416H45.77V40.598Z\" />\n                      <path d=\"M78.14,40.598v2.5742H68.3118v9.5947h7.2544v2.5743H68.3118V66.1829H78.6082v2.5743H65.27V40.598Z\" />\n                      <path d=\"M87.7386,29.5778V75.8331h77.6106V29.5778Zm21.0732,39.1794H93.8348V34.098h3.7441V65.5892h11.2329Zm7.7266,0h-3.7446V34.098h3.7446Zm15.84,0h-3.4565L120.761,34.098h3.7442l6.0967,27.459h.0962l6.0961-27.459h3.7447Zm28.5113,0h-16.417V34.098h15.8413v3.1689H148.2166V49.0755h8.9287v3.168h-8.9287V65.5892H160.89Z\" />\n                    </g>\n                  </svg>\n                </div>\n                <p>{LOCAL.mainDescription}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className={'ResponsiveContainer ModernGreenBack'}>\n          <div className={'Inside'}>\n            <div className=\"ShowcasePart\">\n              <div className={'Text Centered'}>\n                <h2 style={{ color: 'white' }}>\n                  {LOCAL.yourPhoneYourCanvasTitle}\n                </h2>\n                <p style={{ color: 'white' }}>\n                  {LOCAL.yourPhoneYourCanvasDescription}\n                </p>\n              </div>\n              <div className={'ImageContainer'}>\n                <Img fluid={data.imagePhone.childImageSharp.fluid} alt=\"\" />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className={'ResponsiveContainer'}>\n          <div className={'Inside'}>\n            <div className=\"ShowcasePart Column\">\n              <div className={'Text Centered'}>\n                <h2>{LOCAL.joinCollabTitle}</h2>\n                <p>{LOCAL.joinCollabDescription}</p>\n              </div>\n\n              <div className={'PhotogridContainer'}>\n                <PhotoGrid\n                  gatsbyImages={[\n                    data.gridA.childImageSharp.fluid.src,\n                    data.gridB.childImageSharp.fluid.src,\n                    data.gridC.childImageSharp.fluid.src,\n                    data.gridD.childImageSharp.fluid.src,\n                    data.gridE.childImageSharp.fluid.src,\n                    data.gridF.childImageSharp.fluid.src,\n                    data.gridG.childImageSharp.fluid.src,\n                    data.gridH.childImageSharp.fluid.src,\n                    data.gridI.childImageSharp.fluid.src,\n                  ]}\n                  className={'PaddingForNormalSize'}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className={'ResponsiveContainer'}>\n          <div className={'Inside'}>\n            <div className=\"ShowcasePart\">\n              <div className={'Text Centered'}>\n                <h2 style={{ color: 'rgb(40,40,40)' }}>\n                  {LOCAL.covidProofTitle}\n                </h2>\n                <p>{LOCAL.covidProofDescription}</p>\n              </div>\n              <div className={'ImageContainer'}>\n                <Img fluid={data.imageRemote.childImageSharp.fluid} alt=\"\" />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <h2 className={'Punchline'}>{LOCAL.events}</h2>\n        <div className=\"home homePosts\">\n          <div className=\"postGrid\">\n            {posts\n              .filter((post) => post.node.frontmatter.title.length > 0)\n              .filter((post) => post.node.frontmatter.language === locale)\n              .map((post, index) => {\n                if (index < numberOfEventsToShow) return postGrid(post)\n              })}\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              marginTop: '1rem',\n            }}\n          >\n            <button\n              id=\"showAllEventsButton\"\n              onClick={() => {\n                let t = document.getElementById('oldEvents')\n                t.style.display = ''\n                let d = document.getElementById('showAllEventsButton')\n                d.style.display = 'none'\n              }}\n            >\n              {LOCAL.showMoreEvents}\n            </button>\n          </div>\n          <div className=\"postGrid\" id=\"oldEvents\" style={{ display: 'none' }}>\n            {posts\n              .filter((post) => post.node.frontmatter.title.length > 0)\n              .filter((post) => post.node.frontmatter.language === locale)\n              .map((post, index) => {\n                if (numberOfEventsToShow <= index) return postGrid(post)\n              })}\n          </div>\n        </div>\n      </div>\n    </MainLayout>\n  )\n}\n\nexport const gatImage = graphql`\n  fragment gatImage on File {\n    childImageSharp {\n      fluid(maxHeight: 1400) {\n        ...GatsbyImageSharpFluid\n        src\n      }\n    }\n  }\n`\n\nexport const indexPageQuery = graphql`\n  query IndexQuery {\n    backgrounds: allFile(filter: { absolutePath: { regex: \"/backgrounds/\" } }) {\n      nodes {\n        relativePath\n        childImageSharp {\n          fluid(maxWidth: 1400, quality: 100) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n    imagePhone: file(relativePath: { eq: \"gallery/showcase/phone.jpg\" }) {\n      ...gatImage\n    }\n    imageChevagny: file(relativePath: { eq: \"gallery/showcase/chev.jpg\" }) {\n      ...gatImage\n    }\n    imageArt: file(relativePath: { eq: \"gallery/showcase/permanent.jpg\" }) {\n      ...gatImage\n    }\n    imageRemote: file(relativePath: { eq: \"gallery/showcase/remote.jpg\" }) {\n      ...gatImage\n    }\n    gridA: file(relativePath: { eq: \"gallery/showcase/cn.jpg\" }) {\n      ...gatImage\n    }\n    gridB: file(relativePath: { eq: \"gallery/showcase/b.jpg\" }) {\n      ...gatImage\n    }\n    gridC: file(relativePath: { eq: \"gallery/showcase/glow1.jpg\" }) {\n      ...gatImage\n    }\n    gridD: file(relativePath: { eq: \"gallery/showcase/glow2.jpg\" }) {\n      ...gatImage\n    }\n    gridE: file(relativePath: { eq: \"gallery/showcase/chev0.jpg\" }) {\n      ...gatImage\n    }\n    gridF: file(relativePath: { eq: \"gallery/showcase/chev.jpg\" }) {\n      ...gatImage\n    }\n    gridG: file(relativePath: { eq: \"2020-04-01-stayhome/26v_2_webw.jpg\" }) {\n      ...gatImage\n    }\n    gridH: file(\n      relativePath: { eq: \"2020-03-05-spraying-board/SprayingBoard_8.jpg\" }\n    ) {\n      ...gatImage\n    }\n    gridI: file(relativePath: { eq: \"2019-10-20-mur/CHRD-5.jpg\" }) {\n      ...gatImage\n    }\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { category: { eq: \"event\" } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            category\n            subtitle\n            language\n            image {\n              childImageSharp {\n                # Other options include height (set both width and height to crop),\n                # grayscale, duotone, rotate, etc.\n                fluid(maxHeight: 500) {\n                  # Choose either the fragment including a small base64ed image, a traced placeholder SVG, or one without.\n                  ...GatsbyImageSharpFluid\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}